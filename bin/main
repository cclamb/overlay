#!/usr/bin/env ruby
# =The network overlay system
# This is the network overlay system.
# 
# == The primary program entry point (bin/main)
# This is the main program entry point for the overlay system.
# This executable is designed to be called from capistrano,
# after which it will:
# * Grab the network configuration document from S3
# * Bootstrap the network with contained information
#   - This will contain info describing the repository to use
#   - Contains all information to configure the network 
# * Begin waiting for requests
#
# The configuration file is indexed by hostname and contains
# all needed context information as well as information with
# respect to the information repository to download and use.
#
# This expects four arguments.  They are, in order:
# * The URL of the configuration document generated from S3
# * The S3 access key
# * The S3 secret key
# * The S3 location to log overlay specific operational state
require_relative '../lib/garden'

include Garden

# Process the submitted arguments.
arguments = Util::process_args ARGF.argv

# Configure the amazon ruby SDK
Util::configure_aws arguments

# Create the factory and repository facades.
factory = Domain::ComponentFactory::instance \
  :bucket_name => arguments[:bucket_name]
repository = Domain::DataRepository::instance \
  :context_url => arguments[:context_url]

# Load the current network context and create a configuration object.
ctx = repository.get_configuration
cfg = Domain::Configuration.new ctx

# Obtain the system logger.  This is used for recording program
# state, not overlay actions.  For that we use the overlay
# logger.
syslog = factory.create_system_log self

# Log the current context.
syslog.info ctx

# Set to daemon mode so it will run after the capistrano task
# completes.
Process::daemon true, false

syslog.info 'setting to daemon status...'

# Save the current process PID
Util::save_pid

is_pidfile = File::exists? '.overlay_pid'
syslog.info "Does PID file exist? #{is_pidfile}"
syslog.info cfg.inspect

# Run the system with the selected configuration
begin
	Util::start cfg
rescue Exception => err
	syslog.error 'Node has crashed!'
	syslog.error err.to_s
end

# continue = true
# cnt = 0

# while continue
#   sleep 5
#     syslog.info "looping, loop number #{cnt}"
#     #olog.info "looping, loop number #{cnt}"
#   cnt += 1
#   break if cnt > 5
# end

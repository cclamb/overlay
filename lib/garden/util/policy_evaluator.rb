#--
# Copyright (c) 2012 Christopher C. Lamb
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
# See the License for the specific language governing permissions and
# limitations under the License.
#++
# The PolicyEvaluator defines a DSL that describes policies associatd
# with content.  It's designed to run in a block:
#
# = Example
# 
#   evaluator = Util::PolicyEvaluator.new(:one) do
#     instance_eval(File.read(base + 'etc/policies/policy_1.pol'))
#   end
#   ctx = evaluator.ctx
#
class Garden::Util::PolicyEvaluator

  # Stores the context generated by evaluating a DSL.
  attr_accessor :ctx

  # The actively processed policy.  We define this
  # as an object variable rather than passing it
  # from method to methd.
  attr_accessor :active_policy

  # Initializing a DSL session.  The block contains the segment
  # to evaluate.
  def initialize name = 'default', &body
    ctx = {:name => name, :strategy => :all, :rules => []}
    self.ctx = {}
    instance_exec &body
  end

  # Handles the policy_set keyword.
  def policy_set name = nil, &body
    instance_exec &body
  end

  # Handles the policy keyword.
  def policy name, &body
    self.active_policy = {}
    instance_exec &body
    self.ctx[name] = self.active_policy
  end

  # Handles the include keyword.
  def include name
    rules = self.ctx[name]
    raise 'undefined referenced policy' if rules == nil
    self.active_policy = self.active_policy.merge rules
  end

  # Handles the match keyword.  The style is a label, one
  # of either :all, or :one.
  def match style
    self.active_policy[:style] = style
  end

  # Defines a rule.  The submitted block is ruby code
  # that is later evaluated against a context.
  def rule name, &body
    self.active_policy[name] = body
  end

end
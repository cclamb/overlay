#--
# Copyright (c) 2012 Christopher C. Lamb
#
# SBIR DATA RIGHTS
# Contract No. FA8750-11-C-0195
# Contractor: AHS Engineering Services (under subcontract to Modus Operandi, Inc.)
# Address: 5909 Canyon Creek Drive NE, Albuquerque, NM 87111
# Expiration Date: 05/03/2018
# 
# The Governmentâ€™s rights to use, modify, reproduce, release, perform, display, 
# or disclose technical data or computer software marked with this legend are 
# restricted during the period shown as provided in paragraph (b) (4) 
# of the Rights in Noncommercial Technical Data and Computer Software-Small 
# Business Innovative Research (SBIR) Program clause contained in the above 
# identified contract. No restrictions apply after the expiration date shown 
# above. Any reproduction of technical data, computer software, or portions 
# thereof marked with this legend must also reproduce the markings.
#++
# The PolicyEvaluator defines a DSL that describes policies associatd
# with content.  It's designed to run in a block:
#
# = Example
# 
#   evaluator = Util::PolicyEvaluator.new(:one) do
#     instance_eval(File.read(base + 'etc/policies/policy_1.pol'))
#   end
#   ctx = evaluator.ctx
#
class Garden::Util::PolicyEvaluator

  # Stores the context generated by evaluating a DSL.
  attr_accessor :ctx

  # The actively processed policy.  We define this
  # as an object variable rather than passing it
  # from method to methd.
  attr_accessor :active_policy

  # Initializing a DSL session.  The block contains the segment
  # to evaluate.
  def initialize name = 'default', &body
    ctx = {:name => name, :strategy => :all, :rules => []}
    self.ctx = {}
    instance_exec &body
  end

  # Handles the policy_set keyword.
  def policy_set name = nil, &body
    instance_exec &body
  end

  # Handles the policy keyword.
  def policy name, &body
    self.active_policy = {}
    instance_exec &body
    self.ctx[name] = self.active_policy
  end

  # Handles the include keyword.
  def include name
    rules = self.ctx[name]
    raise 'undefined referenced policy' if rules == nil
    self.active_policy = self.active_policy.merge rules
  end

  # Handles the match keyword.  The style is a label, one
  # of either :all, or :one.
  def match style
    self.active_policy[:style] = style
  end

  # Defines a rule.  The submitted block is ruby code
  # that is later evaluated against a context.
  def rule name, &body
    self.active_policy[name] = body
  end

end